(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{221:function(s,n,a){"use strict";a.r(n);var e=a(0),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"regexp终章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp终章"}},[s._v("#")]),s._v(" RegExp终章")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[s._v("MDN官方解释：Regex的语法含义"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("前言：")]),s._v("\n第一章：字符匹配\n第二章：位置匹配")]),s._v(" "),a("h2",{attrs:{id:"第三章-括号的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三章-括号的作用"}},[s._v("#")]),s._v(" 第三章 括号的作用")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("分组和分支结构: 括号即代表分组。括号内的正则即是子表达式；分支结构（p1 | p2）这种是分支结构。")])]),s._v(" "),a("li",[a("p",[s._v("分组引用 ：在匹配过程中，每一个分组都开辟一个空间，用来存储每一个分组匹配到的数据。（例子2-1）")])]),s._v(" "),a("li",[a("p",[s._v("反向引用: \\1（\\数字）表示引用之前的那个分组（xxx）。不管它匹配到什么，\\数字 都匹配那个同样的具体某个字符。（例子3-1）"),a("br"),s._v("\n\\2 \\3也一样，分别指代第二，第三个字符。 "),a("br"),s._v("\n引用了不存在的分组，只会匹配其本身。\n"),a("br"),s._v("上面的括号都会补货它们匹配到的数据。因此称为捕获类型分组和捕获类型分支。")])]),s._v(" "),a("li",[a("p",[s._v("非捕获括号: 写法(?:p) 和 (?:p1|p2|p3) 例子4-1")])]),s._v(" "),a("li",[a("p",[s._v("相关案例: trim()方法模拟 例子5-1")])])]),s._v(" "),a("p",[a("strong",[s._v("例子2-1")])]),s._v(" "),a("p",[s._v("可以使用构造函数的全局属性 $1 至 $9 来获取:（算是正则的API）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nregex.test(string); // 正则操作即可，例如 //regex.exec(string); //string.match(regex);\nconsole.log(RegExp.$1); // "2017"\nconsole.log(RegExp.$2); // "06"\nconsole.log(RegExp.$3); // "12"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("例子3-1")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 未用 “ 反向引用 ” 之前\nvar regex = /\\d{4}(-|\\/|\\.)\\d{2}(-|\\/|\\.)\\d{2}/;\nvar string1 = "2017-06-12";\nvar string2 = "2017/06/12";\nvar string3 = "2017.06.12";\nvar string4 = "2016-06/12";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // true\nconsole.log( regex.test(string4) ); // true\n\n// 用了 “ 反向引用 ” 以后\nvar regex = /\\d{4}(-|\\/|\\.)\\d{2}\\1\\d{2}/;\nvar string1 = "2017-06-12";\nvar string2 = "2017/06/12";\nvar string3 = "2017.06.12";\nvar string4 = "2016-06/12";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // true\nconsole.log( regex.test(string4) ); // false \n\n\n//多括号匹配（我的理解：从大范围到小范围）附上正则可视化图（如下）\nvar regex = /^((\\d)(\\d(\\d)))\\1\\2\\3\\4$/;\nvar string = "1231231233";\nconsole.log( regex.test(string) ); // true\nconsole.log( RegExp.$1 ); // 123\nconsole.log( RegExp.$2 ); // 1\nconsole.log( RegExp.$3 ); // 23\nconsole.log( RegExp.$4 ); // 3\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://i.loli.net/2019/07/02/5d1b014f55f4996550.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("例子4-1")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(?:ab)+/g;\nvar string = "ababa abbb ababab";\nconsole.log( string.match(regex) );\n// => ["abab", "ab", "ababab"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("例子5-1")]),s._v("\ntrim 方法是去掉字符串的开头和结尾的空白符。有两种思路去做。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("第一种，匹配到开头和结尾的空白符，然后替换成空字符:\nfunction trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\nconsole.log( trim(\"  foobar   \") );\n// => \"foobar\"\n\n第二种，匹配整个字符串，然后用引用来提取出相应的数据:\nfunction trim (str) {\n  return str.replace(/^\\s*(.*?)\\s*$/g, \"$1\");\n}\nconsole.log( trim(\"  foobar   \") );\n// => \"foobar\"\n这里使用了惰性匹配 *?，不然也会匹配最后一个空格之前的所有空格的。\n\n//例子：将每个单词的首字母转换为大写\nfunction titleize (str) {\n  return str.toLowerCase().replace(/(?:^|\\s)\\w/g, function (c) {\n      return c.toUpperCase();\n  });\n}\nconsole.log( titleize('my name is epeli') );\n// => \"My Name Is Epeli\"\n\n// 例子：驼峰化\nfunction camelize (str) {\n  return str.replace(/[-_\\s]+(.)?/g, function (match, c) {\n      return c ? c.toUpperCase() : '';\n  });\n}\nconsole.log( camelize('-moz-transform') );\n// => \"MozTransform\"\n\n//例子：中划线化\nfunction dasherize (str) {\n  return str.replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n}\nconsole.log( dasherize('MozTransform') );\n// => \"-moz-transform\"\n\n//HTML 转义和反转义\n// 将HTML特殊字符转换成等值的实体 function escapeHTML (str) {\n  var escapeChars = {\n    '<' : 'lt',\n    '>' : 'gt',\n    '\"' : 'quot',\n'&' : 'amp',\n    '\\'' : '#39'\n  };\n  return str.replace(new RegExp('[' + Object.keys(escapeChars).join('') +']', 'g'),\nfunction (match) {\n      return '&' + escapeChars[match] + ';';\n  });\n}\nconsole.log( escapeHTML('<div>Blah blah blah</div>') );\n// => \"&lt;div&gt;Blah blah blah&lt;/div&gt\";\n\nfunction unescapeHTML (str) {\n  var htmlEntities = {\n    nbsp: ' ',\n    lt: '<',\n    gt: '>',\n    quot: '\"',\n    amp: '&',\n    apos: '\\''\n  };\n  return str.replace(/\\&([^;]+);/g, function (match, key) {\n      if (key in htmlEntities) {\n          return htmlEntities[key];\n}\n      return match;\n  });\n}\nconsole.log( unescapeHTML('&lt;div&gt;Blah blah blah&lt;/div&gt;') );\n// => \"<div>Blah blah blah</div>\"\n\n//匹配成对标签\n<title>regular expression</title>\n<p>laoyao bye bye</p>\n匹配一个开标签，可以使用正则 <[^>]+>， \n匹配一个闭标签，可以使用 <\\/[^>]+>， 但是要求匹配成对标签，那就需要使用反向引用，如:  \n\nvar regex = /<([^>]+)>[\\d\\D]*<\\/\\1>/;\nvar string1 = \"<title>regular expression</title>\";\nvar string2 = \"<p>laoyao bye bye</p>\";\nvar string3 = \"<title>wrong!</p>\";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // false\n\n其中开标签 <[\\^>]+> 改成<([^>]+)>，使用括号的目的是为了后面使用反向引用， 而提供分组。闭标签使用了反向引用，<\\/\\1>。\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br")])]),a("h2",{attrs:{id:"第四章-回溯法原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四章-回溯法原理"}},[s._v("#")]),s._v(" 第四章 回溯法原理")]),s._v(" "),a("p",[a("strong",[s._v("什么是回溯？")]),s._v("\n回溯是正则的匹配原理。")]),s._v(" "),a("p",[s._v("下图是回溯的匹配原理：\n简单的说，就是当匹配到第2个b时，已经满足了b{1,3}的匹配要求。开始匹配c时，就是“回溯”。\n"),a("img",{attrs:{src:"https://i.loli.net/2019/07/02/5d1b070fd578e99934.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("看一下百度百科的解释：")]),s._v(" "),a("img",{attrs:{src:"https://i.loli.net/2019/07/02/5d1b086be9cdb20929.png",alt:""}})]),s._v(" "),a("p",[s._v("JS正则表达式中会产生的回溯地方有哪些呢？")]),s._v(" "),a("ol",[a("li",[s._v("贪婪量词")]),s._v(" "),a("li",[s._v("惰性量词（贪婪量词后面加个问号，表示尽可能少的匹配）")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var string = "12345";\nvar regex = /(\\d{1,3}?)(\\d{1,3})/;\nconsole.log( string.match(regex) );\n// => ["1234", "1", "234", index: 0, input: "12345"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("分支结构")])]),s._v(" "),a("p",[a("strong",[s._v("总结：")]),s._v("\n简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了;要么最 后都试完后，发现整体匹配不成功。"),a("br")]),s._v(" "),a("p",[s._v("既然有回溯的过程，那么匹配效率肯定低一些。相对谁呢?相对那些 DFA 引擎, DFA 是“确定型有限自动 机”的简写。"),a("br"),s._v("\n而 JavaScript 的正则引擎是 NFA，NFA 是“非确定型有限自动机”的简写。 "),a("br"),s._v("大部分语言中的正则都是 NFA，为啥它这么流行呢? "),a("br"),s._v("答:你别看我匹配慢，但是我编译快啊，而且我还有趣哦。")]),s._v(" "),a("h2",{attrs:{id:"第五章-正则表达式拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五章-正则表达式拆分"}},[s._v("#")]),s._v(" 第五章 正则表达式拆分")]),s._v(" "),a("ol",[a("li",[s._v("结构和操作符 例子1-1")]),s._v(" "),a("li",[s._v("注意要点")]),s._v(" "),a("li",[s._v("案例分析")])]),s._v(" "),a("p",[a("strong",[s._v("例子1-1")]),s._v("\n结构和操作符总结：\n"),a("img",{attrs:{src:"https://i.loli.net/2019/07/02/5d1b0ad0c2aea57857.png",alt:""}})]),s._v(" "),a("p",[s._v("竖杠的优先级最低，即最后运算。")])])}),[],!1,null,null,null);n.default=t.exports}}]);