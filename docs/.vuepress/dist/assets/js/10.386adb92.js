(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{227:function(a,s,t){"use strict";t.r(s);var e=t(0),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"regexp篇一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp篇一"}},[a._v("#")]),a._v(" RegExp篇一")]),a._v(" "),t("h2",{attrs:{id:"前言："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言："}},[a._v("#")]),a._v(" 前言：")]),a._v(" "),t("p",[t("strong",[a._v("对于正则表达式，相信很多人都知道，但是很多人的第一感觉就是难学，因为看第一眼时，觉得完全没有规律可寻，而且全是一堆各种各样的特殊符号，完全不知所云。\n其实只是对正则不了解而以，了解了你就会发现，原来就这样啊正则所用的相关字符其实不多，也不难记，更不难懂，唯一难的就是组合起来之后，可读性比较差，而且不容易理解，本文旨在让大家对正则有一个基本的了解，能看得懂简单的正则表达式，写得出简单的正则表达式，用以满足日常开发中的需求即可。")])]),a._v(" "),t("h3",{attrs:{id:"创建一个regexp的两种方式："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个regexp的两种方式："}},[a._v("#")]),a._v(" 创建一个Regexp的两种方式："),t("br")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("var reg = /regexp/")]),a._v(" "),t("br")]),a._v(" "),t("li",[t("code",[a._v("var reg = new RegExp('regexp')")]),a._v(" "),t("br")]),a._v(" "),t("li",[a._v("可以配合使用的3个标志："),t("br")])]),a._v(" "),t("ul",[t("li",[a._v("i ： i可以使正则表达式在匹配时忽略大小写。"),t("code",[a._v("/regexp/i")])]),a._v(" "),t("li",[a._v("g ： g标志可以使正则表达式匹配模式的所有实例。")]),a._v(" "),t("li",[a._v("m ： 可以使正则表达式跨多行(例如textarea元素的值)进行匹配。\n以上这些标志都要放在表达式的尾部（"),t("code",[a._v("/regexp/ig")]),a._v("），或者作为第二个参数传进去（"),t("code",[a._v("new RegExp('regexp', 'ig')")]),a._v("）。")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('//下面的例子演示了各种标志的用法，以及它们是如何影响模式匹配的:\n\nvar pattern = /orange/; \nconsole.log(pattern.test("orange")); // true\n\nvar patternIgnoreCase = /orange/i;\nconsole.log(patternIgnoreCase.test("Orange")); // true\n\nvar patternGlobal = /orange/ig;\nconsole.log(patternGlobal.test("Orange Juice")); // true\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("h3",{attrs:{id:"严格匹配模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#严格匹配模式"}},[a._v("#")]),a._v(" 严格匹配模式")]),a._v(" "),t("p",[a._v("任何非正则表达式字符或操作符的字符序列，代表的都是该字符本身:"),t("br"),a._v(" "),t("code",[a._v("var parttern = /orange/;")]),t("br"),a._v("\n我们很少采用严格匹配，因为这和直接比较两个字符串没什么分别。严格匹配有时候也 叫作简化模式(simple pattern)。")]),a._v(" "),t("h3",{attrs:{id:"匹配字符组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配字符组"}},[a._v("#")]),a._v(" 匹配字符组")]),a._v(" "),t("p",[a._v("如果想匹配一组字符，可以放到[]中来。例如[abc]就表示a,b,c中的任意一个字符。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var pattern = /[abc]/;\nconsole.log(pattern.test('a')); //true\nconsole.log(pattern.test('d')); //false\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("也可以在模式开头加一个^（脱字符）来表示不想匹配到的内容。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var pattern = /[^abc]/;\nconsole.log(pattern.test('a')); //false\nconsole.log(pattern.test('d')); //true\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("这种模式还有另一种很重要的用法是用来指明值的范围。如果想匹配字符或数字的某个连续 范围，可以使用下面的模式:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var pattern = /[0-5]/;\nconsole.log(pattern.test(3)); //true \nconsole.log(pattern.test(12345)); //true \nconsole.log(pattern.test(9)); //false \nconsole.log(pattern.test(6789)); //false \nconsole.log(/[0123456789]/.test("This is year 2015")); //true\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("我们可以看到：[ , ] , ^ , $ , .等字符都是具有特殊含义的字符。那要配配它们的字面量的含义，要怎么做？"),t("br"),a._v("\n加一个"),t("code",[a._v("\\（反斜线字符)")]),a._v("就好了。[ 匹配的就是一个普通的字符[, 而不是字符组的开括号。双"),t("code",[a._v("\\\\")]),a._v("表示一个普通的字符 \\ 。")]),a._v(" "),t("h2",{attrs:{id:"补充：-的两种含义："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#补充：-的两种含义："}},[a._v("#")]),a._v(" 补充：^的两种含义：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://i.loli.net/2019/06/24/5d109d215988c39469.png",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"可以运用到开发中的：exec-和-match-和-replace-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可以运用到开发中的：exec-和-match-和-replace-方法"}},[a._v("#")]),a._v(" 可以运用到开发中的：exec() 和 match() 和 replace()方法")]),a._v(" "),t("ol",[t("li",[a._v("在正则中有exec()方法,如下示例：")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://i.loli.net/2019/06/24/5d1084c80711c50480.png",alt:""}})]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("String对象的方法中有match()方法,如下示例：")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://i.loli.net/2019/06/24/5d10854b03dc329442.png",alt:""}})]),a._v(" "),t("p",[a._v("可以看到两种方法结果是一致的。查找不到的时候则返回null。")]),a._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[a._v("String对象的方法replace()方法实现字符的替换：")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var strToMatch = 'Blue is your favorite color ? blue?'; \nvar regExAt = /Blue/ig; \nconsole.log(strToMatch.replace(regExAt, \"Red\"));\n//输出：Red is your favorite color ? Red?\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("或者，第二个参数接受一个函数：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var strToMatch = 'Blue is your favorite color ?';\nvar regExAt = /Blue/;\nconsole.log(strToMatch.replace(regExAt, function(matchingText){\n  return 'Red';\n}));\n// 输出\"Red is your favorite color ?\"\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[a._v("String对象的split()方法也可以接受正则表达式作为参数并返回一个数组，该数组中包含\n了经过分割后的所有子串:")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var sColor = \'sun,moon,Stars\';\nvar reComma = /[n,s]/i; \nconsole.log(sColor.split(reComma));\n//输出: ["", "u", "", "moo", "", "", "tar", ""]\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("ol",{attrs:{start:"5"}},[t("li",[a._v("使用简单字符组就可以匹配多个模式。假如想匹配cat、bat和fat，下面的代码片段展示了 具体的做法:")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var strToMatch = \'wooden bat, smelly Cat,a fat cat\';\nvar re = /[bcf]at/gi;\nvar arrMatches = strToMatch.match(re);\nconsole.log(arrMatches);\n//输出：["bat", "Cat", "fat", "cat"]\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("ol",{attrs:{start:"6"}},[t("li",[a._v("如你所见，这种用法可以写出更简洁的正则表达式。来看下面的例子:")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var strToMatch = \'i1,i2,i3,i4,i5,i6,i7,i8,i9\';\nvar re = /i[0-5]/gi;\nvar arrMatches = strToMatch.match(re);\nconsole.log(arrMatches);\n//输出：["i1", "i2", "i3", "i4", "i5"]\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h2",{attrs:{id:"快捷写法："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快捷写法："}},[a._v("#")]),a._v(" 快捷写法：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("写法")]),a._v(" "),t("th",[a._v("含义")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("\\d")]),a._v(" "),t("td",[a._v("任意的单个数字字符")])]),a._v(" "),t("tr",[t("td",[a._v("\\w")]),a._v(" "),t("td",[a._v("任意的单个字母或数字字符（包括下划线）")])]),a._v(" "),t("tr",[t("td",[a._v("\\s")]),a._v(" "),t("td",[a._v("任意的单个空白字符(空格、制表符、换行符等)")])]),a._v(" "),t("tr",[t("td",[a._v("\\D")]),a._v(" "),t("td",[a._v("任意的单个非数字字符")])]),a._v(" "),t("tr",[t("td",[a._v("\\W")]),a._v(" "),t("td",[a._v("任意的单个非字母或数字字符")])]),a._v(" "),t("tr",[t("td",[a._v("\\s")]),a._v(" "),t("td",[a._v("任意的单个非空白字符")])]),a._v(" "),t("tr",[t("td",[a._v(".")]),a._v(" "),t("td",[a._v("除换行符之外的任意单个字符")])])])]),a._v(" "),t("ol",[t("li",[a._v("这些快捷写法是书写简洁的正则表达式的关键。看下面的例子:")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var strToMatch = '123-456-7890';\nvar re = /\\d\\d\\d-\\d\\d\\d/;\nvar arrMatches = strToMatch.match(re);\nconsole.log(arrMatches);\n//[\"123-456\"]\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("解决重复出现的重复限定符：")])]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("写法")]),a._v(" "),t("th",[a._v("含义")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("?")]),a._v(" "),t("td",[a._v("出现0次或1次(将模式视为可选的)")])]),a._v(" "),t("tr",[t("td",[a._v("*")]),a._v(" "),t("td",[a._v("出现0次或多次")])]),a._v(" "),t("tr",[t("td",[a._v("+")]),a._v(" "),t("td",[a._v("出现1次或多次")])]),a._v(" "),t("tr",[t("td",[a._v("{n}")]),a._v(" "),t("td",[a._v("只出现n次")])]),a._v(" "),t("tr",[t("td",[a._v("{n,m}")]),a._v(" "),t("td",[a._v("出现n到m次")])]),a._v(" "),t("tr",[t("td",[a._v("{n, }")]),a._v(" "),t("td",[a._v("至少出现n次")])]),a._v(" "),t("tr",[t("td",[a._v("{ ,n}")]),a._v(" "),t("td",[a._v("出现0到n次")])])])]),a._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[a._v("\\b（边界匹配符）的用法：一边是单词字符(字母、数字或下划线)，另一边是 非单词字符。"),t("br"),a._v("\n下面的例子是一个简单的字面匹配。如果cat是一个子串的话，也能够成功匹配:")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//非子串：\nconsole.log(/cat/.test('a black cat')); //true\n\n//子串：\nconsole.log(/cat/.test('a blackcat')); //true\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("下面是使用了 "),t("code",[a._v("\\b")]),a._v(" 以后的例子：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//非子串：\nconsole.log(/\\bcat/.test('a black cat')); //true\n\n//子串：\nconsole.log(/\\bcat/.test('a blackcat')); //false\nconsole.log(/\\bcat/.test('a cataa')); //true\nconsole.log(/\\bcat\\b/.test('a blackcat')); //false\nconsole.log(/\\bcat\\b/.test('a cat')); //true\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("** \\b 作用：**\n上面的解释还是有点模糊，\\b表示的是字符与字符之间看不见的东西（空格）。\n"),t("br"),a._v("如果想匹配cat字符串的话，需要写成："),t("code",[a._v("/\\bcat\\b/")]),a._v(" "),t("br"),a._v("详细解释看下图：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://i.loli.net/2019/06/25/5d11925d66e4080215.png",alt:""}})]),a._v(" "),t("p",[t("strong",[a._v("exec的用法：")]),a._v(" "),t("br"),a._v("\nexec()方法在获取匹配信息方面很有用，因为它会返回一个包含匹配信息的对象。exec() 返回的对象有一个index属性，可以告诉我们成功匹配出现在字符串中的哪个位置。这个功能在 不少地方都能派上用场:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var match = /\\d+/.exec("There are 100 ways to do this");\n    console.log(match);\n    // ["100"]\n    console.log(match.index);\n// 10\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[t("strong",[a._v("()组合符的用法：")]),t("br"),a._v("\n选择结构可以使用|(管道符)来表示。例如，/a|b/可以匹配字符a或b，/(ab)+|(cd)+/ 可以匹配一个或多个ab或cd。")]),a._v(" "),t("h2",{attrs:{id:"首部-与尾部"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#首部-与尾部"}},[a._v("#")]),a._v(" 首部(^)与尾部($)")]),a._v(" "),t("p",[a._v("我们经常需要确保模式在字符串的首部或尾部进行匹配。当脱字符(^)用作正则表达式的 第一个字符的时候，可以将匹配过程锁定在字符串的开头，因此，/^test/只能够匹配出现在待 匹配字符串起始位置上的test子串。与此类似，美元符号($)表示模式必须出现在字符串的尾部: /test$/。"),t("br"),a._v("\n^和$配合使用，表明指定的模式必须涵盖整个待匹配的字符串:/^test$/。")]),a._v(" "),t("h2",{attrs:{id:"向后引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向后引用"}},[a._v("#")]),a._v(" 向后引用")]),a._v(" "),t("p",[a._v("在字符串String使用replace()方法时，可以使用特殊的字符序列$1,$2...来表示对应的分组。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var orig = "1234 5678";\nvar re = /(\\d{4}) (\\d{4})/;\nvar modifiedStr = orig.replace(re, "$2 $1"); \nconsole.log(modifiedStr); // 输出"5678 1234"\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h2",{attrs:{id:"贪婪限定符-所有限定符-与-惰性限定符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪婪限定符-所有限定符-与-惰性限定符"}},[a._v("#")]),a._v(" 贪婪限定符(所有限定符) 与 惰性限定符(?)")]),a._v(" "),t("p",[a._v("例如，模式\\d+能够匹配一个或多个数字。如果字符串是123的话，贪婪匹配可以匹配到1、 12和123。贪婪模式h.+1可以匹配字符串hello中的hell——这是能够匹配的最长的字符串。 因为\\d+是贪婪匹配，所以它会尽可能多地匹配数字，故最后的匹配结果就是123。"),t("br"),a._v("\n与贪婪限定符相反，惰性限定符则是尽可能少地匹配字符。可以在正则表达式后面加上问号 (?)，使其成为惰性匹配。惰性模式h.?l可以匹配字符串hello中的hel—— 这是能够匹配到的最短的字符串。"),t("br"),a._v("\n模式\\w*?X可以匹配到0个或多个单词以及一个X。但是"),t("code",[a._v("*")]),a._v("后的?表示应该尽可能少地匹配字 符。对于字符串abcXXX，匹配结果可以是abcX、abcXX或abcXXX，那究竟应该匹配哪一个呢? 因为*?是惰性模式，所以应该尽可能少地匹配，因此最后的匹配结果是abcX。"),t("br"),a._v("\n删除字符串首尾多余的空白字符是一个极其常见的用法。直到最近，String对象本身都没有 trim()方法，一些JavaScript库为没有String.trim()方法的旧浏览器提供了字符串修剪功能。 最常用的方法如下所示:"),t("br")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function trim(str) {\n   return (str || "").replace(/^\\s+|\\s+$/g,"");\n}\nconsole.log("--"+trim("   test   ")+"--");\n//"--test--"\n\n//如果我们想把重复的空白字符替换成单个呢?\n\n re=/\\s+/g;\n console.log(\'There are     a lot        of spaces\'.replace(re,\' \'));\n //"There are a lot of spaces"\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("在上面的代码片段中，我们尝试匹配一个或多个空格字符序列，然后将其替换成单个空格。"),t("br"),a._v("\n如你所见，正则表达式就像是JavaScript兵器库中的一把瑞士军刀。从长远来看，细心学习、 充分实践，将为你带来丰厚的长期回报。")])])}),[],!1,null,null,null);s.default=r.exports}}]);